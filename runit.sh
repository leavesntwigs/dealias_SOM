#!/bin/sh

#  list the parameters

# put all the unique files in separate base directories
BASE_INPUT_DIR=
BASE_OUTPUT_DIR=

# list input and output files
HAWKEYE=/Applications/HawkEye.app/Contents/MacOS/HawkEye
HAWKEYE_PARAMS=params.HawkEye
CFRADIAL_FILE=
 
# here are the steps

# 10 15 20 25
# for training_sample_percent in 10 15 20 25
 
# extract the data from a RadxPrint of the cfradial data file
# RadxPrint -f data/20170408/cfrad.20170408_001452.962_to_20170408_001604.560_KARX_Surveillance_SUR_edited0730.nc -data -rays > /tmp/radxprint.out
# awk -f make_data_vectors.awk /tmp/radxprint.out > all_points.dat 
# remember to add the dimension, '3' to the top of the all_points.dat file for SOM_PAK to read

# sample_points.py from sample_points_template.py
# python sample_points.py $training_sample_percent > training.dat

for xdim in 12 
do
   for ydim in 3
   do

         
# SOM_PAK/som_pak-3.1/lininit -xdim 12 -ydim 3 -din data/20170408/training.dat -cout editeddata.cod -neigh bubble -topol rect

      SOM_PAK/som_pak-3.1/lininit -xdim $xdim -ydim $ydim -din data/20170408/training.dat -cout editeddata.cod -neigh bubble -topol rect

      for learning_rate in 2
      do
         for neighborhood_radius in 20
         do

            for ntraining_steps in 100
            do 

               SOM_PAK/som_pak-3.1/vsom -din data/20170408/training.dat -cin editeddata.cod -cout editeddata_model.cod -rlen $ntraining_steps -alpha $learning_rate -radius $neighborhood_radius 
               # SOM_PAK/som_pak-3.1/vsom -din data/20170408/training.dat -cin editeddata.cod -cout editeddata_model.cod -rlen 100 -alpha 2 -radius 20 

               SOM_PAK/som_pak-3.1/visual -din data/20170408/just_a_few_points.dat -cin editeddata_model.cod -dout mapping_coords.vis

# SOM_PAK/som_pak-3.1/visual -din data/20170408/just_a_few_points.dat -cin editeddata_model.cod -dout mapping_coords.vis
# debug version
# SOM_PAK/som_pak-3.1/visual -din data/20170408/just_a_few_points.dat -cin editeddata_model.cod -dout mapping_coords.vis -v

  for Nyquist in 2 3 5 7 10
  do
     # SOM_PAK/som_pak-3.1/merge -grid editeddata_model.cod  -din data/20170408/just_a_few_points.dat -mapping mapping_coords.vis -dout merged.dat -Nyquist $Nyquist

     SOM_PAK/som_pak-3.1/merge -grid editeddata_model.cod  -din data/20170408/just_a_few_points.dat -mapping mapping_coords.vis -dout merged.dat -Nyquist $Nyquist

  426  awk -f tf_result_2list.awk result_fullsize > result_radx_input
  427  awk -f tf_result_2list.awk result_fullsize > result_radx_input
  428  head result_radx_input 
  437  mv SOM_result SOM_result_fullsize.nc
  438  mv SOM_result.nc SOM_result_clusters.nc
  439  RadxPrint -f SOM_result_fullsize.nc -data -rays | less
  440  RadxPrint -f SOM_result_fullsize.nc -data -rays | grep az
  449  less result_radx_input
  450  less result_radx_input

  577  cd SOM_PAK/som_pak-3.1; make merge; cd ../..
  580  cd SOM_PAK/som_pak-3.1; make merge; cd ../..

  628  SOM/radxops merged.dat
  629  ls -lrt
  630  mv SOM_result SOM_result_SOM_PAK.nc
  631  RadxPrint -f SOM_result_SOM_PAK.nc -data -rays | less
  $HAWKEYE -f $CFRADIAL_FILE -params $HAWKEYE_PARAMS

  done # for Nyquist
   done # ydim
done    # xdim


// Output directory for images generated by this app.
//
//
// Type: string
//

images_output_dir = "/tmp/images/HawkEye";

///////////// images_write_to_day_dir /////////////////
//
// Option to create a subdirectory for each day.
//
//
// Type: boolean
//

images_write_to_day_dir = TRUE;

///////////// images_file_name_category ///////////////
//
// Set the category string.
//
// If empty, no category will be included.
//
//
// Type: string
//

images_file_name_category = "radar";

///////////// images_file_name_platform ///////////////
//
// Set the platform string.
//
// If empty, no platform will be included.
//
//
// Type: string
//

images_file_name_platform = "NSF_NCAR_GV_HCR";

///////////// images_file_name_extension //////////////
//
// Set the extension string. This also governs the file format. It 
//   should be 'png', 'jpg', 'gif' etc.
//
// An extension is always required.
//
//
// Type: string
//

images_file_name_extension = "png";
//======================================================================
//
// OPTION TO CREATE IMAGES AUTOMATICALLY.
//
//======================================================================
 
///////////// images_auto_create //////////////////////
//
// Option to create images automatically.
//
//
// Type: boolean
//

images_auto_create = FALSE;

///////////// images_creation_mode ////////////////////
//
// Mode for controlling auto image creation.
//

//
// CREATE_IMAGES_FROM_GUI: create images interactively using the GUI.
//
// CREATE_IMAGES_THEN_EXIT: for the specified start time and time span, 
//   create an output image for every field in the fields array, and then 
//   exit.
//
// CREATE_IMAGES_ON_REALTIME_SCHEDULE: wait for the scheduled time, then 
//   generate an image for each field.
//
// CREATE_IMAGES_ON_ARCHIVE_SCHEDULE: for each scheduled time between 
//   the start and end times, generate an image for each field.
//
//
// Type: enum
// Options:
//     CREATE_IMAGES_THEN_EXIT
//     CREATE_IMAGES_ON_REALTIME_SCHEDULE
//     CREATE_IMAGES_ON_ARCHIVE_SCHEDULE
//

images_creation_mode = CREATE_IMAGES_THEN_EXIT;

 ///////////// images_set_sweep_index_list /////////////
//
// Option to specify the sweep indexes for the image generation.
//
// If TRUE, only the specified sweeps will be processed.
//
//
// Type: boolean
//

images_set_sweep_index_list = FALSE;

///////////// images_sweep_index_list /////////////////
//
// List of valid sweep indexes for image generation.
//
// See 'images_set_sweep_index_list'. Images will only be generated for 
//   the specified sweep indexes.
//
//
// Type: int
// 1D array - variable length.
//

images_sweep_index_list = {
 0,
 1,
 2
};